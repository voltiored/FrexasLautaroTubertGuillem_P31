package prog2.vista;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import prog2.adaptador.Adaptador;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class FrmGestioBarresControl extends JDialog {
    private Adaptador adaptador;
    private JPanel contentPane;
    private JSlider sldBarresControl;
    private JTextField txtIntroduirInsercioBarresControl;
    private JButton btnIntroduirInsercioBarresControl;
    private JLabel lblInsercio;

    //private static int valorModificatLocal; // valor provisional no aplicat

    public FrmGestioBarresControl(FrmGestioComponentsCentral parent, Adaptador adaptador) {
        super(parent, "Gestió de Barres de Control", true);
        this.adaptador = adaptador;

        $$$setupUI$$$();
        setContentPane(contentPane);
        setModal(true);
        setSize(400, 250);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocationRelativeTo(parent);

        // Inicialitzem l'slider i el valor local amb el valor actual
        sldBarresControl.setValue(FrmGestioComponentsCentral.getValorBarraControl());
        txtIntroduirInsercioBarresControl.setText(String.valueOf(FrmGestioComponentsCentral.getValorBarraControl()));
        lblInsercio.setText("Insercio Actual: " + adaptador.getInsercioBarres());

        // Quan es mou el slider, només canviem el valor local (no el model)
        sldBarresControl.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                txtIntroduirInsercioBarresControl.setText(String.valueOf(sldBarresControl.getValue()));
            }
        });
        // Botó per introduir un valor al camp de text
        btnIntroduirInsercioBarresControl.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int valor = Integer.parseInt(txtIntroduirInsercioBarresControl.getText());
                    if (valor < 0 || valor > 100) {
                        throw new NumberFormatException("El valor ha d'estar entre 0 i 100");
                    }
                    FrmGestioComponentsCentral.setValorBarraControl(valor); // només actualitzem el valor local
                    sldBarresControl.setValue(valor); // actualitzem també el slider
                    lblInsercio.setText("Insercio Actual: " + adaptador.getInsercioBarres());
                    dispose();
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(FrmGestioBarresControl.this,
                            "Introdueix un número vàlid entre 0 i 100", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(6, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        txtIntroduirInsercioBarresControl = new JTextField();
        panel1.add(txtIntroduirInsercioBarresControl, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btnIntroduirInsercioBarresControl = new JButton();
        btnIntroduirInsercioBarresControl.setText("Inserir");
        panel1.add(btnIntroduirInsercioBarresControl, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sldBarresControl = new JSlider();
        sldBarresControl.setInverted(false);
        sldBarresControl.setMajorTickSpacing(100);
        sldBarresControl.setMinorTickSpacing(5);
        sldBarresControl.setPaintLabels(true);
        sldBarresControl.setPaintTicks(true);
        sldBarresControl.setValue(0);
        contentPane.add(sldBarresControl, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Introdueix el percentatge");
        contentPane.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        lblInsercio = new JLabel();
        lblInsercio.setText("Insercio Actual: " + adaptador.getInsercioBarres());
        contentPane.add(lblInsercio, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
